// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package dht

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DhtServiceClient is the client API for DhtService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DhtServiceClient interface {
	Put(ctx context.Context, in *Pair, opts ...grpc.CallOption) (*Ack, error)
	Get(ctx context.Context, in *Key, opts ...grpc.CallOption) (*Value, error)
}

type dhtServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDhtServiceClient(cc grpc.ClientConnInterface) DhtServiceClient {
	return &dhtServiceClient{cc}
}

func (c *dhtServiceClient) Put(ctx context.Context, in *Pair, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/dht.DhtService/Put", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dhtServiceClient) Get(ctx context.Context, in *Key, opts ...grpc.CallOption) (*Value, error) {
	out := new(Value)
	err := c.cc.Invoke(ctx, "/dht.DhtService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DhtServiceServer is the server API for DhtService service.
// All implementations must embed UnimplementedDhtServiceServer
// for forward compatibility
type DhtServiceServer interface {
	Put(context.Context, *Pair) (*Ack, error)
	Get(context.Context, *Key) (*Value, error)
	mustEmbedUnimplementedDhtServiceServer()
}

// UnimplementedDhtServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDhtServiceServer struct {
}

func (UnimplementedDhtServiceServer) Put(context.Context, *Pair) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Put not implemented")
}
func (UnimplementedDhtServiceServer) Get(context.Context, *Key) (*Value, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedDhtServiceServer) mustEmbedUnimplementedDhtServiceServer() {}

// UnsafeDhtServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DhtServiceServer will
// result in compilation errors.
type UnsafeDhtServiceServer interface {
	mustEmbedUnimplementedDhtServiceServer()
}

func RegisterDhtServiceServer(s grpc.ServiceRegistrar, srv DhtServiceServer) {
	s.RegisterService(&DhtService_ServiceDesc, srv)
}

func _DhtService_Put_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Pair)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DhtServiceServer).Put(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dht.DhtService/Put",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DhtServiceServer).Put(ctx, req.(*Pair))
	}
	return interceptor(ctx, in, info, handler)
}

func _DhtService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Key)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DhtServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dht.DhtService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DhtServiceServer).Get(ctx, req.(*Key))
	}
	return interceptor(ctx, in, info, handler)
}

// DhtService_ServiceDesc is the grpc.ServiceDesc for DhtService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DhtService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dht.DhtService",
	HandlerType: (*DhtServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Put",
			Handler:    _DhtService_Put_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _DhtService_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dht.proto",
}
